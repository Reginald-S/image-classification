from Ipython.display import Image
image('images/cat.1.jpg')

from from Ipython.display import Image
image('images/dog.6224.jpg')

%matplotlib inline
import matplotlib.pylot as plt
import tesorflow as tf
import numpy as np
from sklearn.metrics import confusion_matrix
import time
from datetime import timedelta
import math

filter_size1 = 5  
num_filters1 = 16 

filter_size2 = 5  
num_filters2 = 36 

filter_size3 = 5
num_filters3 = 56

#fully-connected layer
fc_size = 128     

From tensorflow.examples.tutorials.mnist import input_data
data = input_data.read_data_sets('data/MNIST/', one_hot=True)

print("size of:")
print("- Training-set:\t\t{}".format(len(data.train.labels)))
print("- Test-set:\t\t{}".format(len(data.test.labels)))
print("- Validation-set:\t{}".format(len(data.validation.labels)))
data.test.cls = np.argmax(data.test.labels, axis=1)
#The MNIST images are 28 pixels in each dimension
img_size = 28


img_size_flat = img_size * img_size


img_shape = (img_size, img_size)

#https://en.wikipedia.org/wiki/Channel_(digital_image)
#channels mean number of primary colors
num_channels = 1


num_classes = 10

def plot_images(images, cls_true, cls_pred=None):
    assert len(images) == len(cls_true) == 9
    
   
    fig, axes = plt.subplots(3, 3)
    fig.subplots_adjust(hspace=0.3, wspace=0.3)

    for i, ax in enumerate(axes.flat):
       
        ax.imshow(images[i].reshape(img_shape), cmap='binary')

       
        if cls_pred is None:
            xlabel = "True: {0}".format(cls_true[i])
        else:
            xlabel = "True: {0}, Pred: {1}".format(cls_true[i], cls_pred[i])

        
        ax.set_xlabel(xlabel)
        
        
        ax.set_xticks([])
        ax.set_yticks([])
    plt.show()
    

images = data.test.images[0:9]


cls_true = data.test.cls[0:9]


plot_images(images=images, cls_true=cls_true)


def new_weights(shape):
    return tf.Variable(tf.truncated_normal(shape, stddev=0.05))
    def new_biases(length):
    
    return tf.Variable(tf.constant(0.05, shape=[length]))
    
    def new_conv_layer(input,            
                   num_input_channels, 
                   filter_size,        


num_filters,       
                   use_pooling=True):  

    shape = [filter_size, filter_size, num_input_channels, num_filters]
  
    weights = new_weights(shape=shape)

    biases = new_biases(length=num_filters)

    layer = tf.nn.conv2d(input=input,
                         filter=weights,
                         strides=[1, 1, 1, 1],
                         padding='SAME')

    layer += biases

        layer = tf.nn.max_pool(value=layer,
                               ksize=[2, 4, 4, 2],
                               strides=[1, 2, 2, 1],
                               padding='SAME')

    layer = tf.nn.relu(layer)
   
   return layer, weights
   
   def new_fc_layer(input,         
                 num_inputs,     
                 num_outputs,   
                 use_relu=True): 

   
    weights = new_weights(shape=[num_inputs, num_outputs])
    biases = new_biases(length=num_outputs)

    
    layer = tf.matmul(input, weights) + biases

   
    if use_relu:
        layer = tf.nn.relu(layer)

    return layer
    ##Convolutional layer 1
    layer_conv1, weights_conv1 = \
    new_conv_layer(input=x_image,
                   num_input_channels=num_channels,
                   filter_size=filter_size1,
                   num_filters=num_filters1,
                   use_pooling=True)
     layer_flat, num_features = flatten_layer(layer_conv1)
    
#Convolutional layer 2
layer_conv2, weights_conv2 = \
    new_conv_layer(input=layer_conv1,
                   num_input_channels=num_filters1,
                   filter_size=filter_size2,
                   num_filters=num_filters2,
                   use_pooling=True)        
 layer_flat, num_features = flatten_layer(layer_conv2)
 
 layer_fc1 = new_fc_layer(input=layer_flat,
                         num_inputs=num_features,
                         num_outputs=fc_size,
                         use_relu=True)
                         
 layer_fc2 = new_fc_layer(input=layer_fc1,
                         num_inputs=fc_size,
                         num_outputs=num_classes,
                         use_relu=False)
